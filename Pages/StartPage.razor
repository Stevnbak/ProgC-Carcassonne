@page "/start"
@inject NavigationManager Navigation
<PageTitle>Carcassonne - Start</PageTitle>
<h1>Carcassonne - Start</h1>
<p>Starting screen, select players and start game</p>

<div class="amount center column">
    <h2>Amount of players:</h2>
    <input @onchange="playerCountChanged" value="@playerCount" type="number" title="playerCount" min="2" max="8" />
</div>
<div class="names center column">
    <h2>Player names:</h2>
    @for (int i = 1; i <= nameInputs.Count; i++)
    {
        int j = i - 1;
        <div class="center row">
            <p>Player @(i): </p>
            <input value="@nameInputs[j]" type="text" @onchange="(ChangeEventArgs e) => nameInputs[j] = e.Value.ToString()" />
        </div>
    }
</div>
<button @onclick="startGame">Start Game</button>

@code {
    int playerCount = Store.GameSettings.PlayerCount;
    List<string> nameInputs = new List<string>();

    //On load
    protected override async Task OnInitializedAsync()
    {
        if (Store.Deck == null || Store.Board == null || Store.TileTypes == null)
        {
            Navigation.NavigateTo("/");
        } else
        {
            for (int i = 0; i < Store.GameSettings.PlayerCount; i++)
            {
                nameInputs.Add("Player " + (i + 1));
            }
        }
    }

    void playerCountChanged(ChangeEventArgs e)
    {
        playerCount = int.Parse(e.Value.ToString() ?? "1");
        if (playerCount > 10) playerCount = 10;
        if (playerCount < 2) playerCount = 2;

        if(nameInputs.Count < playerCount)
        {
            while (nameInputs.Count < playerCount)
            {
                nameInputs.Add("Player " + (nameInputs.Count + 1));    
            }
        } else if(nameInputs.Count > playerCount)
        {
            nameInputs.RemoveRange(playerCount, nameInputs.Count - playerCount);
        }
    }

    void startGame()
    {
        Store.GameSettings.PlayerCount = playerCount;
        Store.Players = new List<Player>();
        for (int i = 0; i < Store.GameSettings.PlayerCount; i++)
        {
            Store.Players.Add(new Player(nameInputs[i]));
        }

        //Go to play page
        Navigation.NavigateTo("/play");
    }
}

<style>
    * {
        font-size: 1rem;
    }

    .center {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .row {
        flex-direction: row;
    }

    .column {
        flex-direction: column;
    }

    h1 {
        font-size: 4rem;
        margin: 5rem 0;
    }

    h2 {
        font-size: 2.5rem;
        margin: 1.5rem 0 0.5rem 0;
    }

    .amount, .names {
        min-width: 50%;
    }

    .names p {
        font-size: 1.5rem;
        margin: 0 1rem;
    }

    .names {
        min-height: 33%;
    }

    .amount {
        min-height: 10%;
    }

    input[type="text"] {
        width: 10rem;
    }

    button {
        margin: 0.5rem;
        padding: 0.25rem;
        min-height: 0.5rem;
        min-width: 10rem;
    }

    button:hover {
        cursor: pointer;
    }


</style>
